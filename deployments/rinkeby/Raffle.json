{
  "address": "0x2b8E04D9118122381E34A6030D05F9e62a05ea3C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__RaffleNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__SendMoreToEnterRaffle",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NUM_WORDS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REQUEST_CONFIRMATIONS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeedNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_callbackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_entranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_gasLane",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_interval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_vrfCoordinator",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_players",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_raffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_recentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6428f35d3526c1869c0f345ccf96e6c74528aaa567467e0afd44e5c178d004c8",
  "receipt": {
    "to": null,
    "from": "0x60ff9eF432e9B5dAFDA2AC51139Cd7AD1f24c233",
    "contractAddress": "0x2b8E04D9118122381E34A6030D05F9e62a05ea3C",
    "transactionIndex": 19,
    "gasUsed": "1299397",
    "logsBloom": "0x
    "blockHash": "0x302c2bdf133fa8287d715d22bc2ec723a65ef50c5e957c5226abd090dc266033",
    "transactionHash": "0x6428f35d3526c1869c0f345ccf96e6c74528aaa567467e0afd44e5c178d004c8",
    "logs": [],
    "blockNumber": 10601839,
    "cumulativeGasUsed": "2410079",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "100000000000000000",
    300,
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "3587",
    "50000"
  ],
  "numDeployments": 1,
  "solcInputHash": "cd1fbb75d0d307c201071acee5a3e0cb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__RaffleNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__SendMoreToEnterRaffle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NUM_WORDS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUEST_CONFIRMATIONS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeedNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_callbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_entranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_gasLane\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_vrfCoordinator\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_players\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_raffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_recentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\" 1 - Be true after some interval 2 - Want the lottery to be open 3 - The contract has ETH 4 - There is al least 1 player 5- Keepers has LINK\"},\"enterRaffle()\":{\"details\":\" - Check if msg.value is correct - Check state of Raffle -> Open or Calculating\"}},\"version\":1},\"userdoc\":{\"events\":{\"RaffleEnter(address)\":{\"notice\":\"Events\"}},\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"Function to check the 4 below requirements, if fulfilled -> pick a Winner\"},\"enterRaffle()\":{\"notice\":\"Function for users to join the Raffle\"},\"i_vrfCoordinator()\":{\"notice\":\"VRF Variables\"},\"performUpkeep(bytes)\":{\"notice\":\"Functions to actually pick a random NUMBER -> Chainlink keepers to do it Automatically and decentralized\"},\"s_raffleState()\":{\"notice\":\"Variables\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0xec8b7e3032e887dd0732d2a5f8552ddce64a99a81b0008ef0bcf6cad68a535fc\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\"; // to work with COORDINATOR and VRF\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\"; // to use functionalities for Chainlink VRF\\n\\nerror Raffle__SendMoreToEnterRaffle();\\nerror Raffle__RaffleNotOpen();\\nerror Raffle__UpkeepNotNeeded();\\nerror Raffle__TransferFailed();\\n\\ncontract Raffle is VRFConsumerBaseV2 {\\n    \\n    /// @notice Enums\\n    // To let user enter the Raffle or not\\n    enum RaffleState { \\n        Open,\\n        Calculating\\n    }\\n\\n    /// @notice Variables\\n    RaffleState public s_raffleState; // s_ because 'store' and we are going to change the value\\n    uint256 public immutable i_entranceFee; // Fee to join the Raffle (Immutable: unchangeable and cheaper)\\n    uint256 public immutable i_interval; // interval when Raffle State should change\\n    uint256 public s_lastTimeStamp; // to get last time Raffle State changed\\n    address payable[] public s_players; // to have raffle players\\n    address public s_recentWinner; // most recent Winner\\n\\n    /// @notice VRF Variables\\n    VRFCoordinatorV2Interface public immutable i_vrfCoordinator; // coordinator for working with Chainlink VRF \\n    bytes32 public immutable i_gasLane;\\n    uint64 public immutable i_subscriptionId;\\n    uint32 public immutable i_callbackGasLimit;\\n    uint16 public constant REQUEST_CONFIRMATIONS = 3; // how many blocks are needed to be considered complete\\n    uint32 public constant NUM_WORDS = 1; // how many random numbers we want to get\\n\\n    /// @notice Events\\n    event RaffleEnter(address indexed player); // when a user enters Raffle\\n    event RequestedRaffleWinner(uint256 indexed requestId); // when VRF gives a random number (winner)\\n    event WinnerPicked(address indexed winner); // winner is picked\\n\\n    constructor(uint256 entranceFee, uint256 interval, address vrfCoordinatorV2, bytes32 gasLane, uint64 subscriptionId, uint32 callbackGasLimit) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = entranceFee;\\n        i_interval = interval;\\n        s_lastTimeStamp = block.timestamp;\\n\\n        //VRF Variables\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2); // interface(address) -> contract, so i_vrfCoordinator is now a contract (we can interat with it)\\n        i_gasLane = gasLane; // keyHash -> how much gas is max to get Random Number (price per gas)\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit; // when Chainlink node respond with the random number it uses gas - max gas amount\\n    }\\n\\n    /**\\n    * @notice Function for users to join the Raffle\\n    * @dev \\n    * - Check if msg.value is correct\\n    * - Check state of Raffle -> Open or Calculating\\n    */\\n    function enterRaffle() external payable {\\n        // require(msg.value > i_entranceFee, \\\"Not enough money sent.\\\"); ->  Better use custom error\\n        if (msg.value < i_entranceFee) {\\n            revert Raffle__SendMoreToEnterRaffle();\\n        }\\n\\n        // Check Raffle state\\n        if (s_raffleState != RaffleState.Open) { // Raffle closed\\n            revert Raffle__RaffleNotOpen();\\n        }\\n\\n        // Raffle Open -> users can enter\\n        s_players.push((payable(msg.sender))); // store player address into array\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    /**\\n    * @notice Functions for select a RANDOMand AUTOMATICALLY WINNER -> Chainlink Keepers\\n    * @dev \\n    * 1 - Want it done Automatically\\n    * 2 - Want it to be really RANDOM\\n    */\\n\\n    /**\\n    * @notice Function to check the 4 below requirements, if fulfilled -> pick a Winner\\n    * @dev \\n    * 1 - Be true after some interval\\n    * 2 - Want the lottery to be open\\n    * 3 - The contract has ETH\\n    * 4 - There is al least 1 player\\n    * 5- Keepers has LINK\\n    */\\n    function checkUpkeep(bytes memory /* checkData */) public view returns(bool upkeedNeeded, bytes memory /*performData*/) {\\n        bool isOpen = RaffleState.Open == s_raffleState; // 2 - check if its open\\n        bool timePassed = (block.timestamp - s_lastTimeStamp > i_interval); // 1 - true if timePassed is > interval\\n        bool hasBalance = address(this).balance > 0; // 3 - check if contract has ETH\\n        bool hasPlayers = s_players.length > 0; // 4 - check if there is al least 1 player\\n\\n        upkeedNeeded = (timePassed && isOpen && hasBalance && hasPlayers); // EVERY REQUIREMENT IS FULFILLED\\n        return (upkeedNeeded,\\\"0x0\\\");\\n    }\\n\\n    /**\\n    * @notice Functions to actually pick a random NUMBER -> Chainlink keepers to do it Automatically and decentralized\\n    */\\n    function performUpkeep(bytes calldata /* performData */) external {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\"); //checkUpkeep returns 2 parameters but we only need first 1\\n        if (!upkeepNeeded) { // requirements not met\\n            revert Raffle__UpkeepNotNeeded();\\n        }\\n\\n        // REQUIREMENTS MET! -> PICK A WINNER (random NUMBER) -> use Chainlink VRF\\n        s_raffleState = RaffleState.Calculating; // Change Raffle State\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(i_gasLane, i_subscriptionId, REQUEST_CONFIRMATIONS, i_callbackGasLimit, NUM_WORDS);\\n        emit RequestedRaffleWinner(requestId);    \\n    }\\n\\n    /**\\n    * @notice Functions to actually pick a winner -> Pass from Chanlink VRF random NUMBER to WINNER\\n    * @dev \\n    * - randomWords -> array of randomWords\\n    * - should RESET RAFFLE\\n    * - should pay winner\\n    * - use .call() to send ETH (best way to do it)\\n    */\\n    function fulfillRandomWords(uint256 /* requestId */, uint256[] memory randomWords) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length; // just in case random number is very long we apply modular function\\n        address payable recentWinner = s_players[indexOfWinner]; // WINNER PICKED\\n        s_recentWinner = recentWinner; // get view Winner address from outside the contract\\n\\n        // RESET RAFFLE and PAY WINNER\\n        s_players = new address payable[](0); // reset players array\\n        s_lastTimeStamp = block.timestamp; \\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\"); // We pay winner (SEND ALL THE ETH IN THE CONTRACT)\\n        if (!success) { // check if transaction succeded\\n            revert Raffle__TransferFailed();\\n        }\\n        emit WinnerPicked(recentWinner);\\n    }\\n}\",\"keccak256\":\"0xe686f0174e50533e7c7e854d9a19d404e21439e0ec37b67447fbfbf33980ba67\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b50604051620019a9380380620019a983398181016040528101906200003891906200017f565b838073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508560a081815250508460c08181525050426001819055508373ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508261010081815250508167ffffffffffffffff166101208167ffffffffffffffff1660c01b815250508063ffffffff166101408163ffffffff1660e01b815250505050505050506200030e565b6000815190506200011d816200028c565b92915050565b6000815190506200013481620002a6565b92915050565b6000815190506200014b81620002c0565b92915050565b6000815190506200016281620002da565b92915050565b6000815190506200017981620002f4565b92915050565b60008060008060008060c087890312156200019f576200019e62000287565b5b6000620001af89828a016200013a565b9650506020620001c289828a016200013a565b9550506040620001d589828a016200010c565b9450506060620001e889828a0162000123565b9350506080620001fb89828a0162000168565b92505060a06200020e89828a0162000151565b9150509295509295509295565b6000620002288262000239565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600080fd5b62000297816200021b565b8114620002a357600080fd5b50565b620002b1816200022f565b8114620002bd57600080fd5b50565b620002cb8162000259565b8114620002d757600080fd5b50565b620002e58162000263565b8114620002f157600080fd5b50565b620002ff8162000273565b81146200030b57600080fd5b50565b60805160601c60a05160c05160e05160601c610100516101205160c01c6101405160e01c611603620003a6600039600081816106dd01526109c20152600081816106ba01526107a7015260008181610699015261092a01526000818161065d015261098d0152600081816107d0015261083401526000818161046a01526108e00152600081816103aa01526103fe01526116036000f3fe6080604052600436106100f35760003560e01c806372cf6e341161008a578063ae771f6b11610059578063ae771f6b146102ea578063aebc455014610327578063cc45483f14610352578063d757d0271461037d576100f3565b806372cf6e341461023e5780637ea3e6c1146102695780638638b0c6146102945780638e879c8a146102bf576100f3565b8063470cdf97116100c6578063470cdf971461017f57806367f082b0146101aa5780636919207d146101d55780636e04ff0d14610200576100f3565b80631fe543e3146100f85780632cfcc53914610121578063348540431461012b5780634585e33b14610156575b600080fd5b34801561010457600080fd5b5061011f600480360381019061011a9190610f11565b6103a8565b005b610129610468565b005b34801561013757600080fd5b506101406105d5565b60405161014d91906111c2565b60405180910390f35b34801561016257600080fd5b5061017d60048036038101906101789190610e21565b6105db565b005b34801561018b57600080fd5b506101946107a5565b6040516101a191906111f8565b60405180910390f35b3480156101b657600080fd5b506101bf6107c9565b6040516101cc91906111a7565b60405180910390f35b3480156101e157600080fd5b506101ea6107ce565b6040516101f791906111c2565b60405180910390f35b34801561020c57600080fd5b5061022760048036038101906102229190610e6e565b6107f2565b6040516102359291906110d3565b60405180910390f35b34801561024a57600080fd5b506102536108d9565b60405161026091906111dd565b60405180910390f35b34801561027557600080fd5b5061027e6108de565b60405161028b91906111c2565b60405180910390f35b3480156102a057600080fd5b506102a9610902565b6040516102b69190611074565b60405180910390f35b3480156102cb57600080fd5b506102d4610928565b6040516102e19190611103565b60405180910390f35b3480156102f657600080fd5b50610311600480360381019061030c9190610eb7565b61094c565b60405161031e919061108f565b60405180910390f35b34801561033357600080fd5b5061033c61098b565b6040516103499190611171565b60405180910390f35b34801561035e57600080fd5b506103676109af565b604051610374919061118c565b60405180910390f35b34801561038957600080fd5b506103926109c0565b60405161039f91906111dd565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461045a57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104519291906110aa565b60405180910390fd5b61046482826109e4565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156104c2576040517f3038c00a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104d6576104d56114e3565b5b60008054906101000a900460ff1660018111156104f6576104f56114e3565b5b1461052d576040517fd24a271400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60015481565b60006105f5604051806020016040528060008152506107f2565b5090508061062f576040517f8e4bc81700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016000806101000a81548160ff02191690836001811115610654576106536114e3565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161071e95949392919061111e565b602060405180830381600087803b15801561073857600080fd5b505af115801561074c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107709190610ee4565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600381565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000606060008060009054906101000a900460ff166001811115610819576108186114e3565b5b6000600181111561082d5761082c6114e3565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006001544261086191906112bc565b119050600080471190506000806002805490501190508280156108815750835b801561088a5750815b80156108935750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b600181565b7f000000000000000000000000000000000000000000000000000000000000000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6002818154811061095c57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600060028054905082600081518110610a00576109ff611512565b5b6020026020010151610a129190611454565b9050600060028281548110610a2a57610a29611512565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610ab357610ab2611541565b5b604051908082528060200260200182016040528015610ae15781602001602082028036833780820191505090505b5060029080519060200190610af7929190610bec565b504260018190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b259061105f565b60006040518083038185875af1925050503d8060008114610b62576040519150601f19603f3d011682016040523d82523d6000602084013e610b67565b606091505b5050905080610ba2576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610c65579160200282015b82811115610c645782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c0c565b5b509050610c729190610c76565b5090565b5b80821115610c8f576000816000905550600101610c77565b5090565b6000610ca6610ca184611238565b611213565b90508083825260208201905082856020860282011115610cc957610cc861157a565b5b60005b85811015610cf95781610cdf8882610df7565b845260208401935060208301925050600181019050610ccc565b5050509392505050565b6000610d16610d1184611264565b611213565b905082815260208101848484011115610d3257610d3161157f565b5b610d3d8482856113e1565b509392505050565b600082601f830112610d5a57610d59611575565b5b8135610d6a848260208601610c93565b91505092915050565b60008083601f840112610d8957610d88611575565b5b8235905067ffffffffffffffff811115610da657610da5611570565b5b602083019150836001820283011115610dc257610dc161157a565b5b9250929050565b600082601f830112610dde57610ddd611575565b5b8135610dee848260208601610d03565b91505092915050565b600081359050610e06816115b6565b92915050565b600081519050610e1b816115b6565b92915050565b60008060208385031215610e3857610e37611589565b5b600083013567ffffffffffffffff811115610e5657610e55611584565b5b610e6285828601610d73565b92509250509250929050565b600060208284031215610e8457610e83611589565b5b600082013567ffffffffffffffff811115610ea257610ea1611584565b5b610eae84828501610dc9565b91505092915050565b600060208284031215610ecd57610ecc611589565b5b6000610edb84828501610df7565b91505092915050565b600060208284031215610efa57610ef9611589565b5b6000610f0884828501610e0c565b91505092915050565b60008060408385031215610f2857610f27611589565b5b6000610f3685828601610df7565b925050602083013567ffffffffffffffff811115610f5757610f56611584565b5b610f6385828601610d45565b9150509250929050565b610f7681611302565b82525050565b610f85816112f0565b82525050565b610f9481611314565b82525050565b610fa381611320565b82525050565b6000610fb482611295565b610fbe81856112a0565b9350610fce8185602086016113f0565b610fd78161158e565b840191505092915050565b610feb81611399565b82525050565b610ffa816113ab565b82525050565b600061100d6000836112b1565b91506110188261159f565b600082019050919050565b61102c8161133d565b82525050565b61103b8161136b565b82525050565b61104a81611375565b82525050565b61105981611385565b82525050565b600061106a82611000565b9150819050919050565b60006020820190506110896000830184610f7c565b92915050565b60006020820190506110a46000830184610f6d565b92915050565b60006040820190506110bf6000830185610f7c565b6110cc6020830184610f7c565b9392505050565b60006040820190506110e86000830185610f8b565b81810360208301526110fa8184610fa9565b90509392505050565b60006020820190506111186000830184610f9a565b92915050565b600060a0820190506111336000830188610f9a565b6111406020830187611050565b61114d6040830186611023565b61115a6060830185611041565b6111676080830184611041565b9695505050505050565b60006020820190506111866000830184610fe2565b92915050565b60006020820190506111a16000830184610ff1565b92915050565b60006020820190506111bc6000830184611023565b92915050565b60006020820190506111d76000830184611032565b92915050565b60006020820190506111f26000830184611041565b92915050565b600060208201905061120d6000830184611050565b92915050565b600061121d61122e565b90506112298282611423565b919050565b6000604051905090565b600067ffffffffffffffff82111561125357611252611541565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561127f5761127e611541565b5b6112888261158e565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006112c78261136b565b91506112d28361136b565b9250828210156112e5576112e4611485565b5b828203905092915050565b60006112fb8261134b565b9050919050565b600061130d8261134b565b9050919050565b60008115159050919050565b6000819050919050565b6000819050611338826115a2565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006113a4826113bd565b9050919050565b60006113b68261132a565b9050919050565b60006113c8826113cf565b9050919050565b60006113da8261134b565b9050919050565b82818337600083830152505050565b60005b8381101561140e5780820151818401526020810190506113f3565b8381111561141d576000848401525b50505050565b61142c8261158e565b810181811067ffffffffffffffff8211171561144b5761144a611541565b5b80604052505050565b600061145f8261136b565b915061146a8361136b565b92508261147a576114796114b4565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b600281106115b3576115b26114e3565b5b50565b6115bf8161136b565b81146115ca57600080fd5b5056fea2646970667358221220629c33d13da7ec54986adef3e728056afce0d70d3df3d8cfa1f3b4f600f7a40364736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c806372cf6e341161008a578063ae771f6b11610059578063ae771f6b146102ea578063aebc455014610327578063cc45483f14610352578063d757d0271461037d576100f3565b806372cf6e341461023e5780637ea3e6c1146102695780638638b0c6146102945780638e879c8a146102bf576100f3565b8063470cdf97116100c6578063470cdf971461017f57806367f082b0146101aa5780636919207d146101d55780636e04ff0d14610200576100f3565b80631fe543e3146100f85780632cfcc53914610121578063348540431461012b5780634585e33b14610156575b600080fd5b34801561010457600080fd5b5061011f600480360381019061011a9190610f11565b6103a8565b005b610129610468565b005b34801561013757600080fd5b506101406105d5565b60405161014d91906111c2565b60405180910390f35b34801561016257600080fd5b5061017d60048036038101906101789190610e21565b6105db565b005b34801561018b57600080fd5b506101946107a5565b6040516101a191906111f8565b60405180910390f35b3480156101b657600080fd5b506101bf6107c9565b6040516101cc91906111a7565b60405180910390f35b3480156101e157600080fd5b506101ea6107ce565b6040516101f791906111c2565b60405180910390f35b34801561020c57600080fd5b5061022760048036038101906102229190610e6e565b6107f2565b6040516102359291906110d3565b60405180910390f35b34801561024a57600080fd5b506102536108d9565b60405161026091906111dd565b60405180910390f35b34801561027557600080fd5b5061027e6108de565b60405161028b91906111c2565b60405180910390f35b3480156102a057600080fd5b506102a9610902565b6040516102b69190611074565b60405180910390f35b3480156102cb57600080fd5b506102d4610928565b6040516102e19190611103565b60405180910390f35b3480156102f657600080fd5b50610311600480360381019061030c9190610eb7565b61094c565b60405161031e919061108f565b60405180910390f35b34801561033357600080fd5b5061033c61098b565b6040516103499190611171565b60405180910390f35b34801561035e57600080fd5b506103676109af565b604051610374919061118c565b60405180910390f35b34801561038957600080fd5b506103926109c0565b60405161039f91906111dd565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461045a57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104519291906110aa565b60405180910390fd5b61046482826109e4565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156104c2576040517f3038c00a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104d6576104d56114e3565b5b60008054906101000a900460ff1660018111156104f6576104f56114e3565b5b1461052d576040517fd24a271400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60015481565b60006105f5604051806020016040528060008152506107f2565b5090508061062f576040517f8e4bc81700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016000806101000a81548160ff02191690836001811115610654576106536114e3565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161071e95949392919061111e565b602060405180830381600087803b15801561073857600080fd5b505af115801561074c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107709190610ee4565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600381565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000606060008060009054906101000a900460ff166001811115610819576108186114e3565b5b6000600181111561082d5761082c6114e3565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006001544261086191906112bc565b119050600080471190506000806002805490501190508280156108815750835b801561088a5750815b80156108935750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b600181565b7f000000000000000000000000000000000000000000000000000000000000000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6002818154811061095c57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600060028054905082600081518110610a00576109ff611512565b5b6020026020010151610a129190611454565b9050600060028281548110610a2a57610a29611512565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610ab357610ab2611541565b5b604051908082528060200260200182016040528015610ae15781602001602082028036833780820191505090505b5060029080519060200190610af7929190610bec565b504260018190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b259061105f565b60006040518083038185875af1925050503d8060008114610b62576040519150601f19603f3d011682016040523d82523d6000602084013e610b67565b606091505b5050905080610ba2576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610c65579160200282015b82811115610c645782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c0c565b5b509050610c729190610c76565b5090565b5b80821115610c8f576000816000905550600101610c77565b5090565b6000610ca6610ca184611238565b611213565b90508083825260208201905082856020860282011115610cc957610cc861157a565b5b60005b85811015610cf95781610cdf8882610df7565b845260208401935060208301925050600181019050610ccc565b5050509392505050565b6000610d16610d1184611264565b611213565b905082815260208101848484011115610d3257610d3161157f565b5b610d3d8482856113e1565b509392505050565b600082601f830112610d5a57610d59611575565b5b8135610d6a848260208601610c93565b91505092915050565b60008083601f840112610d8957610d88611575565b5b8235905067ffffffffffffffff811115610da657610da5611570565b5b602083019150836001820283011115610dc257610dc161157a565b5b9250929050565b600082601f830112610dde57610ddd611575565b5b8135610dee848260208601610d03565b91505092915050565b600081359050610e06816115b6565b92915050565b600081519050610e1b816115b6565b92915050565b60008060208385031215610e3857610e37611589565b5b600083013567ffffffffffffffff811115610e5657610e55611584565b5b610e6285828601610d73565b92509250509250929050565b600060208284031215610e8457610e83611589565b5b600082013567ffffffffffffffff811115610ea257610ea1611584565b5b610eae84828501610dc9565b91505092915050565b600060208284031215610ecd57610ecc611589565b5b6000610edb84828501610df7565b91505092915050565b600060208284031215610efa57610ef9611589565b5b6000610f0884828501610e0c565b91505092915050565b60008060408385031215610f2857610f27611589565b5b6000610f3685828601610df7565b925050602083013567ffffffffffffffff811115610f5757610f56611584565b5b610f6385828601610d45565b9150509250929050565b610f7681611302565b82525050565b610f85816112f0565b82525050565b610f9481611314565b82525050565b610fa381611320565b82525050565b6000610fb482611295565b610fbe81856112a0565b9350610fce8185602086016113f0565b610fd78161158e565b840191505092915050565b610feb81611399565b82525050565b610ffa816113ab565b82525050565b600061100d6000836112b1565b91506110188261159f565b600082019050919050565b61102c8161133d565b82525050565b61103b8161136b565b82525050565b61104a81611375565b82525050565b61105981611385565b82525050565b600061106a82611000565b9150819050919050565b60006020820190506110896000830184610f7c565b92915050565b60006020820190506110a46000830184610f6d565b92915050565b60006040820190506110bf6000830185610f7c565b6110cc6020830184610f7c565b9392505050565b60006040820190506110e86000830185610f8b565b81810360208301526110fa8184610fa9565b90509392505050565b60006020820190506111186000830184610f9a565b92915050565b600060a0820190506111336000830188610f9a565b6111406020830187611050565b61114d6040830186611023565b61115a6060830185611041565b6111676080830184611041565b9695505050505050565b60006020820190506111866000830184610fe2565b92915050565b60006020820190506111a16000830184610ff1565b92915050565b60006020820190506111bc6000830184611023565b92915050565b60006020820190506111d76000830184611032565b92915050565b60006020820190506111f26000830184611041565b92915050565b600060208201905061120d6000830184611050565b92915050565b600061121d61122e565b90506112298282611423565b919050565b6000604051905090565b600067ffffffffffffffff82111561125357611252611541565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561127f5761127e611541565b5b6112888261158e565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006112c78261136b565b91506112d28361136b565b9250828210156112e5576112e4611485565b5b828203905092915050565b60006112fb8261134b565b9050919050565b600061130d8261134b565b9050919050565b60008115159050919050565b6000819050919050565b6000819050611338826115a2565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006113a4826113bd565b9050919050565b60006113b68261132a565b9050919050565b60006113c8826113cf565b9050919050565b60006113da8261134b565b9050919050565b82818337600083830152505050565b60005b8381101561140e5780820151818401526020810190506113f3565b8381111561141d576000848401525b50505050565b61142c8261158e565b810181811067ffffffffffffffff8211171561144b5761144a611541565b5b80604052505050565b600061145f8261136b565b915061146a8361136b565b92508261147a576114796114b4565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b600281106115b3576115b26114e3565b5b50565b6115bf8161136b565b81146115ca57600080fd5b5056fea2646970667358221220629c33d13da7ec54986adef3e728056afce0d70d3df3d8cfa1f3b4f600f7a40364736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": " 1 - Be true after some interval 2 - Want the lottery to be open 3 - The contract has ETH 4 - There is al least 1 player 5- Keepers has LINK"
      },
      "enterRaffle()": {
        "details": " - Check if msg.value is correct - Check state of Raffle -> Open or Calculating"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "RaffleEnter(address)": {
        "notice": "Events"
      }
    },
    "kind": "user",
    "methods": {
      "checkUpkeep(bytes)": {
        "notice": "Function to check the 4 below requirements, if fulfilled -> pick a Winner"
      },
      "enterRaffle()": {
        "notice": "Function for users to join the Raffle"
      },
      "i_vrfCoordinator()": {
        "notice": "VRF Variables"
      },
      "performUpkeep(bytes)": {
        "notice": "Functions to actually pick a random NUMBER -> Chainlink keepers to do it Automatically and decentralized"
      },
      "s_raffleState()": {
        "notice": "Variables"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 167,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 0,
        "slot": "0",
        "type": "t_enum(RaffleState)163"
      },
      {
        "astId": 173,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 176,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 178,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)163": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
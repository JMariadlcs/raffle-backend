{
  "language": "Solidity",
  "sources": {
    "contracts/Raffle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\"; // to work with COORDINATOR and VRF\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\"; // to use functionalities for Chainlink VRF\n\nerror Raffle__SendMoreToEnterRaffle();\nerror Raffle__RaffleNotOpen();\nerror Raffle__UpkeepNotNeeded();\nerror Raffle__TransferFailed();\n\ncontract Raffle is VRFConsumerBaseV2 {\n    \n    /// @notice Enums\n    // To let user enter the Raffle or not\n    enum RaffleState { \n        Open,\n        Calculating\n    }\n\n    /// @notice Variables\n    RaffleState public s_raffleState; // s_ because 'store' and we are going to change the value\n    uint256 public immutable i_entranceFee; // Fee to join the Raffle (Immutable: unchangeable and cheaper)\n    uint256 public immutable i_interval; // interval when Raffle State should change\n    uint256 public s_lastTimeStamp; // to get last time Raffle State changed\n    address payable[] public s_players; // to have raffle players\n    address public s_recentWinner; // most recent Winner\n\n    /// @notice VRF Variables\n    VRFCoordinatorV2Interface public immutable i_vrfCoordinator; // coordinator for working with Chainlink VRF \n    bytes32 public immutable i_gasLane;\n    uint64 public immutable i_subscriptionId;\n    uint32 public immutable i_callbackGasLimit;\n    uint16 public constant REQUEST_CONFIRMATIONS = 3; // how many blocks are needed to be considered complete\n    uint32 public constant NUM_WORDS = 1; // how many random numbers we want to get\n\n    /// @notice Events\n    event RaffleEnter(address indexed player); // when a user enters Raffle\n    event RequestedRaffleWinner(uint256 indexed requestId); // when VRF gives a random number (winner)\n    event WinnerPicked(address indexed winner); // winner is picked\n\n    constructor(uint256 entranceFee, uint256 interval, address vrfCoordinatorV2, bytes32 gasLane, uint64 subscriptionId, uint32 callbackGasLimit) VRFConsumerBaseV2(vrfCoordinatorV2) {\n        i_entranceFee = entranceFee;\n        i_interval = interval;\n        s_lastTimeStamp = block.timestamp;\n\n        //VRF Variables\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2); // interface(address) -> contract, so i_vrfCoordinator is now a contract (we can interat with it)\n        i_gasLane = gasLane; // keyHash -> how much gas is max to get Random Number (price per gas)\n        i_subscriptionId = subscriptionId;\n        i_callbackGasLimit = callbackGasLimit; // when Chainlink node respond with the random number it uses gas - max gas amount\n    }\n\n    /**\n    * @notice Function for users to join the Raffle\n    * @dev \n    * - Check if msg.value is correct\n    * - Check state of Raffle -> Open or Calculating\n    */\n    function enterRaffle() external payable {\n        // require(msg.value > i_entranceFee, \"Not enough money sent.\"); ->  Better use custom error\n        if (msg.value < i_entranceFee) {\n            revert Raffle__SendMoreToEnterRaffle();\n        }\n\n        // Check Raffle state\n        if (s_raffleState != RaffleState.Open) { // Raffle closed\n            revert Raffle__RaffleNotOpen();\n        }\n\n        // Raffle Open -> users can enter\n        s_players.push((payable(msg.sender))); // store player address into array\n        emit RaffleEnter(msg.sender);\n    }\n\n    /**\n    * @notice Functions for select a RANDOMand AUTOMATICALLY WINNER -> Chainlink Keepers\n    * @dev \n    * 1 - Want it done Automatically\n    * 2 - Want it to be really RANDOM\n    */\n\n    /**\n    * @notice Function to check the 4 below requirements, if fulfilled -> pick a Winner\n    * @dev \n    * 1 - Be true after some interval\n    * 2 - Want the lottery to be open\n    * 3 - The contract has ETH\n    * 4 - There is al least 1 player\n    * 5- Keepers has LINK\n    */\n    function checkUpkeep(bytes memory /* checkData */) public view returns(bool upkeedNeeded, bytes memory /*performData*/) {\n        bool isOpen = RaffleState.Open == s_raffleState; // 2 - check if its open\n        bool timePassed = (block.timestamp - s_lastTimeStamp > i_interval); // 1 - true if timePassed is > interval\n        bool hasBalance = address(this).balance > 0; // 3 - check if contract has ETH\n        bool hasPlayers = s_players.length > 0; // 4 - check if there is al least 1 player\n\n        upkeedNeeded = (timePassed && isOpen && hasBalance && hasPlayers); // EVERY REQUIREMENT IS FULFILLED\n        return (upkeedNeeded,\"0x0\");\n    }\n\n    /**\n    * @notice Functions to actually pick a random NUMBER -> Chainlink keepers to do it Automatically and decentralized\n    */\n    function performUpkeep(bytes calldata /* performData */) external {\n        (bool upkeepNeeded, ) = checkUpkeep(\"\"); //checkUpkeep returns 2 parameters but we only need first 1\n        if (!upkeepNeeded) { // requirements not met\n            revert Raffle__UpkeepNotNeeded();\n        }\n\n        // REQUIREMENTS MET! -> PICK A WINNER (random NUMBER) -> use Chainlink VRF\n        s_raffleState = RaffleState.Calculating; // Change Raffle State\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(i_gasLane, i_subscriptionId, REQUEST_CONFIRMATIONS, i_callbackGasLimit, NUM_WORDS);\n        emit RequestedRaffleWinner(requestId);    \n    }\n\n    /**\n    * @notice Functions to actually pick a winner -> Pass from Chanlink VRF random NUMBER to WINNER\n    * @dev \n    * - randomWords -> array of randomWords\n    * - should RESET RAFFLE\n    * - should pay winner\n    * - use .call() to send ETH (best way to do it)\n    */\n    function fulfillRandomWords(uint256 /* requestId */, uint256[] memory randomWords) internal override {\n        uint256 indexOfWinner = randomWords[0] % s_players.length; // just in case random number is very long we apply modular function\n        address payable recentWinner = s_players[indexOfWinner]; // WINNER PICKED\n        s_recentWinner = recentWinner; // get view Winner address from outside the contract\n\n        // RESET RAFFLE and PAY WINNER\n        s_players = new address payable[](0); // reset players array\n        s_lastTimeStamp = block.timestamp; \n        (bool success, ) = recentWinner.call{value: address(this).balance}(\"\"); // We pay winner (SEND ALL THE ETH IN THE CONTRACT)\n        if (!success) { // check if transaction succeded\n            revert Raffle__TransferFailed();\n        }\n        emit WinnerPicked(recentWinner);\n    }\n}"
    },
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}